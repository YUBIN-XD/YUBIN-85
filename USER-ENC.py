# Encoded By Yubin-hero
# https://www.github.com/YUBIN-XD
# Time : Mon Nov 27 19:26:06 2023
# -------------------------------
_ = lambda __ : __import__('marshal').loads(__import__('base64').b64decode(__[::-1]));exec((_)(b'='))